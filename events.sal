load "generators.sal"

;---------------- EVENTS ---------------------------------------------
;defines basic functions for constructing sounds based on parameters
;that can be varied in accordance with labels

;an event is a sound object that can be made using some parameters
;we view a sound object as having a specific type of volume envelope
;we place the sound object in a label and its motion takes up the entire label

;layer: the layer that this event is a part of
;presence: a list of labels for which the event is present (if an event is present in a label then it takes up the entire duration of the label as one motion)
;if the presence is not supplied, then the name must be the name of a label 
;then this event will take place everywhere that label is used
;generator is the generator for the event
;envelope specifies one of the envelopes at the top of this file to use
;pitch-type specifies what the pitch content of this event is and is also chosen from the top of this file
;indexed-label-restrictions: a list of pairs (label-name, ns) where ns is a list of indices
;such that the labels in presence will only be applied if they are 
;contained at the xth contained label index of the label label-name for some x
;label restrictions: a list of labels such that any label in presence will only be applied
;if that label is contained within some label in label-restrictions
define function make-event(layer, name, presence: "use-name", 
                           generator, envelope: *e-presence*, pitch-type: ,
						   indexed-label-restrictions: nil, label-restrictions: nil)
 begin
    
 end




;name is the name of a label 
;context is a list of the form {CR {p1 i1} {p2 i2} ... {pn in}}
;where CR is the current root and is just a label name
;then each {px ix} indicates the parent of the label to its left and ix tells us that
;the label to the left is the ixth child of the label to the right (within context)
;this essentially tells us the root to label path for the current label of this event
;return the sound event names that will be sounded during this context
;the output is a list {{e1 c} {e2 c} {e3 c}}
;where each event is ajoined to the context (this is done so that) when the events are 
;processed later they can be processed with their context
define function get-events-for-context(name, context)
 begin

 end


;return the samples of the event with name event at the context 
;reminder: context is a list {}
define function get-event-audio(event, context)
 begin

 end