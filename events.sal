load "generators.sal"

;---------------- EVENTS ---------------------------------------------
;defines basic functions for placing parameters via labels 
;so that we can musically construct sound events with respect to those parameters
;an event is a parameter of a sound object that affects how that sound object 
;is constructed
;to be musical, we can add events in accordance with labels


;store all the event objects in a list
define variable *all-events* = nil


;retreive an event object from its name
define function search-event(event-name)
 begin
	loop
	 for i from 0 below length(*all-events*)
		if get-event-name(nth(i, *all-events*)) = event-name then return nth(i, *all-events*)
	 end
	return "not found"
 end

;parent is the grouping label that this melodic-event applies to
;note all labels will be loooked for in layer layer
;it will then apply the pitches from your pitch-sequence 
;in order of appearance of the list of labels for-labels
;throughout the ordered leaves of the label tree rooted at parent
;if the list of for-labels is exhausted then it is repeated
;if the pitch-sequence is exhausted then it is also repeated
define function add-event-melody(layer, parent, for-labels, pitch-sequence)
 begin

 end


;check if this event has any context-decider that accepts this context
define function does-event-matter-at-context(event-object, context)
 begin
	return decide(context, accumulate-context-decider-or(get-all-context-deciders-for-event(event-object)))
 end

;return a list {{e1 context} {e2 context} ... {en context}}
;where e1 through en are the names of the events 
define function get-events-at-context(context)
 begin
	set accepting-events = nil
	loop 
	  for i from 0 below length(*all-events*)
		if does-event-matter-at-context(nth(i, *all-events*), context) then 
		 begin
			set accepting-events = cons(list(get-event-name(nth(i, *all-events*)), context), accepting-events)
		 end
	  end
	return accepting-events
 end



;return a list which maps the event parameters to their values at this context based on the event-info
define function generate-event-attributes-at-context(event-info, context)
 begin
	set result = nil
	loop 
	  for i from 0 below length(event-info)
		 set cur-parameter = nth(0, nth(i, event-info))
		 set cur-parameter-values = nth(1, nth(i, event-info))
		 loop
		   for j from 0 below length(cur-parameter-values) 
			  if decide(context, nth(1, nth(j, cur-parameter-values))) then 
			    begin
                   set result = cons(list(cur-parameter, nth(0, nth(j, cur-parameter-values))), result)
				end
		   end
	  end
 end

;input is a list {event-name context} 
;return the samples for playing the event event-name at context context
define function get-audio-for-event-at-context(event-context-list)
 begin
	set event-name = nth(0, event-context-list)
	set context = nth(1, event-context-list)
	set event-object = search-event(event-name)
	set event-info = get-event-info(event-object)
	return generate-event-samples-at-context(event-object, generate-event-attributes-at-context(event-info, context), context)
 end