
define variable *unit-pulse-duration* = 0.25 ;seconds 
define variable *unit-pulse-symbol* = "â€ "
define variable *labels* = nil

define function set-unit-pulse(t)
 begin
    set *unit-pulse-duration* = t
 end


;label collection interface
;-----------------------------------------------------------------------
;return a label-object
;if expect-to-find is true and it is not found an error will be printed
;otherwise if it is not found you will receive false instead of the label object
define function find-label(name, expect-to-find: true)
 begin
    loop 
        for i from 0 below length(*labels*)
		   set label-object = nth(i, *labels*)
		   if extract-name(label-object) = name then return label-object
	    end
    if expect-to-find then print(strcat("error: invalid label name in find-label: ", name)) 
    else return false
 end

;requires label is not already existing
 define function insert-label(label-object)
  begin
     set *labels* = cons(label-object, *labels*)
  end
;-----------------------------------------------------------------------




;add a label that feels one swing with duration duration
;note, the duration has to be another label, can use n-unit() to create
;a 'ghost' label where n-unit(n) is a label durating n unit pulses
define function add-simple-label(name, duration-label)
 begin
	exec insert-label(make-label(name, nil, extract-duration(find-label(duration-label))))
 end

;only we should use this (not user)
;it allows us to add a label with an arbitrary duration by
;allowing the duration argument to be a time rather than a label
define function add-simple-label-hidden(name, duration)
 begin
   exec insert-label(make-label(name, nil, duration))
 end

;group together already existing labels 
;name is the name of the new label you want to add
;containment is the list of labels such that this label is felt by feeling that list in order
define function add-grouping-label(name, containment)
 begin
	set duration = 0
		loop 
		    for i from 0 below length(containment)
            set ith-label-object = find-label(nth(i, containment))
			   set duration = duration + extract-duration(ith-label-object)
			end
		 exec insert-label(make-label(name, containment, duration))
 end


;add a label built on sub-labels which don't exist yet
;since the sub-labels don't yet exist, you have to specify the total duration by providing
;another label. This label will have total duration equal to that other label
;the duration of the sublabels is inferred by making them evenly spaced
;important: requires ALL labels in containment to not exist yet
;this function mainly to be used for creating tuplets
;if you want to use labels you made already it's better to use a multi-call scheme to add-grouping-label
define function add-multi-label(name, containment, duration-label)
 begin
	;first make the containment labels
	loop 
	  with sub-duration = extract-duration(find-label(duration-label)) / length(containment)
	  for i from 0 below length(containment)
	     exec add-simple-label-hidden(nth(i, containment), sub-duration)
	  end
	;now that the sub-labels exist we can make the actual label
	exec add-grouping-label(name, containment)
 end

;while the multi label lets you specify a containment but stretches it to a different duration,
;the simple multi label lets you specify a containment as a duration but keep it to a single pulse
define function add-simple-multi-label(name, duration-containment)
 begin
    with duration = 0
    loop 
      for i from 0 below length(duration-containment)
        set duration = duration + extract-duration(find-label(nth(i, duration-containment)))
      end
    exec insert-label(make-label(name, nil, duration))
 end


;make and return a label that has duration n unit pulses
;warning: this works in an unsafe way, the generated label is NOT A VALID LABEL
;the only way it is valid is that if you can get-duration on it you get the correct duration
define function n-unit(n)
 begin
    with label-name = strcat("_____", format(nil, "~A", n), "_____")

    if find-label(label-name, expect-to-find: false) = false then 
      exec insert-label(make-unsafe-duration-label(label-name, n * *unit-pulse-duration*))
    
    return label-name
 end


;flatten a list (only a single level)
define function flatten(L)
 begin
   if L = nil then return nil
   return append(nth(0, L), flatten(rest(L)))
 end

;given a label label-name, output a list with just the leaves corresponding
;to the musical tree of that label. 
define function make-leaves-list(label-name)
 begin
   with label-object = find-label(label-name),
        containment = extract-containment(label-object),
        res = nil
   if containment = nil then
    begin
      return list(label-name) ;this is a leaf
    end
    loop 
     for i from 0 below length(containment)
       set res = cons(make-leaves-list(nth(i, containment)), res)
     end
   return flatten(reverse(res))
 end


;for a label which is the ith contained label within label label-name, get the index of the first node
;of that label with respect to the entire label label-name
define function get-starting-index-of-sublabel(label-name, i)
 begin
    with result = 0,
         containment = extract-containment(find-label(label-name))
    loop 
      for j from 0 below i
        set result = result + length(make-leaves-list(nth(j, containment)))
      end
    
    return result
 end