
define variable *unit-pulse-duration* = 0.25 ;seconds 
define variable *unit-pulse-symbol* = "â€ "

define function set-unit-pulse(t)
 begin
    set *unit-pulse-duration* = t
 end




define function init-labels-for-layer(name)
 begin
    ;store the labels: the format is {label1 label2 label3 ... labeln}, where
    ; labeli = {name duration(in seconds) containment } (unless labeli = *unit-pulse-symbol* in which case there is no containment or duration (since we just read from *unit-pulse-duration*))
    ;where containment is a list containing the labels that this label contains, or a number if instead this label is broken down into that number of pulses.
    ;In this case, the duration refers to the total time taken up by the sub-pulses and not each individual sub-pulse
    exec table-add(name, list(make-unit-pulse-label()))
 end



;label collection interface
;-----------------------------------------------------------------------
;return a label-object
;if expect-to-find is true and it is not found an error will be printed
;otherwise if it is not found you will receive false instead of the label object
define function find-label(layer, name, expect-to-find: true)
 begin
    with labels = table-get(layer)
    if labels = "_--not found--_" then 
     begin
       print(strcat("error: invalid layer name in find-label: ", layer))
       return false
     end
    loop 
        for i from 0 below length(labels)
		   set label-object = nth(i, labels)
		   if extract-name(label-object) = name then return label-object
	    end
    if expect-to-find then print(strcat("error: invalid label name in find-label: ", name)) 
    else return false
 end

;requires label is not already in *labels* for this layer
 define function insert-label(layer, label-object)
  begin
     with labels = table-get(layer)
     if labels = "_--not found--_" then 
       begin
          exec init-labels-for-layer(layer)
       end
     set labels = cons(label-object, labels)
     exec table-set(layer, labels)
  end
;-----------------------------------------------------------------------




;add a label to your musical world
;name is the name of the label, it must be distinct from other labels you've made so far
;containment is a list of the labels making up your label
;each label in the list can be a label you made already or the unit pulse
;the duration argument can be left blank for the length of this label to be inferred based on the containment
;otherwise the containment must be set to a list {n id} where n is the number of subpulses 
;with label id and they fit equally within this label of duration duration-label
define function add-label(layer-name, name, containment: 1, duration-label: "infer")
 begin
    if duration-label = "infer" then
	  begin
         set duration = 0
		   loop 
		    for i from 0 below length(containment)
			   set duration = duration + extract-duration(find-label(layer-name, nth(i, containment)))
			end
		 exec insert-label(layer-name, make-containment-label(name, duration, containment))
		 return
  	  end
  	set duration = extract-duration(find-label(layer-name, duration-label))
	exec insert-label(layer-name, make-anonymous-subpulses-label(name, duration, containment))
 end





;return the inter-onset intervals given by the flow of the label in a tree format
define function label-to-iois(layer, label)
 begin
    with label-object = find-label(layer, label),
	     type = containment-type(label-object),
		 duration = extract-duration(label-object),
		 res = nil
    if type = *unit-pulse-symbol* then return *unit-pulse-duration*
    else if type = "anonymous-subpulses-label" then 
      begin
         with n = extract-anonymous-subpulses(label-object)
	    loop
          for i from 0 below n
             set res = cons(duration / (n * 1.0), res)
		  end
		return res
	 end
	else 
 	  begin
        with containment = extract-containment(label-object)
		loop
          for i from 0 below length(containment)		
             set res = cons(label-to-iois(layer, nth(i, containment)), res)
		  end
		return reverse(res)
	  end
 end

;make and return a label that has duration n unit pulses
;warning: this works in an unsafe way, the generated label is NOT A VALID LABEL
;the only way it is valid is that if you can get-duration on it you get the correct duration
define function n-unit(n)
 begin
    with label-name = strcat("_____", format(nil, "~A", n), "_____"),
         layer-names = table-get-keys()
 
    loop 
      for i from 0 below length(layer-names)
         if find-label(nth(i, layer-names), label-name, expect-to-find: false) = false then 
         exec insert-label(nth(i, layer-names), make-unsafe-duration-label(label-name, n * *unit-pulse-duration*))
      end
    
    return label-name
 end


;so technicallyyy you only need to call this if you are going to use n-unit()
;but it's good style to use it anyway
define function add-layer(name)
  begin
    exec init-labels-for-layer(name)
  end
