
define variable *unit-pulse-duration* = 0.25 ;seconds 
define variable *unit-pulse-symbol* = "â€ "

define function set-unit-pulse(t)
 begin
    set *unit-pulse-duration* = t
 end




define function init-labels-for-layer(name)
 begin
    ;store the labels: the format is {label1 label2 label3 ... labeln}, where
    ; labeli = {name duration(in seconds) containment } (unless labeli = *unit-pulse-symbol* in which case there is no containment or duration (since we just read from *unit-pulse-duration*))
    ;where containment is a list containing the labels that this label contains, or a number if instead this label is broken down into that number of pulses.
    ;In this case, the duration refers to the total time taken up by the sub-pulses and not each individual sub-pulse
    exec table-add(name, list(make-unit-pulse-label()))
 end



;label collection interface
;-----------------------------------------------------------------------
;return a label-object
;if expect-to-find is true and it is not found an error will be printed
;otherwise if it is not found you will receive false instead of the label object
define function find-label(layer, name, expect-to-find: true)
 begin
    with labels = table-get(layer)
    if labels = "_--not found--_" then 
     begin
       print(strcat("error: invalid layer name in find-label: ", layer))
       return false
     end
    loop 
        for i from 0 below length(labels)
		   set label-object = nth(i, labels)
		   if extract-name(label-object) = name then return label-object
	    end
    if expect-to-find then print(strcat("error: invalid label name in find-label: ", name)) 
    else return false
 end

;requires label is not already in *labels* for this layer
 define function insert-label(layer, label-object)
  begin
     with labels = table-get(layer)
     if labels = "_--not found--_" then 
       begin
          exec init-labels-for-layer(layer)
       end
     set labels = cons(label-object, labels)
     exec table-set(layer, labels)
  end
;-----------------------------------------------------------------------




;add a label that feels one swing with duration duration
;note, the duration has to be another label, can use n-unit() to create
;a 'ghost' label where n-unit(n) is a label durating n unit pulses
define function add-simple-label(layer, name, duration)
 begin
	exec insert-label(layer, make-label(name, nil, duration))
 end

;group together already existing labels 
;name is the name of the new label you want to add
;containment is the list of labels such that this label is felt by feeling that list in order
define function add-grouping-label(layer, name, containment)
 begin
	set duration = 0
		loop 
		    for i from 0 below length(containment)
			   set duration = duration + extract-duration(find-label(layer, nth(i, containment)))
			end
		 exec insert-label(layer, make-label(name, containment, duration))
 end


;add a label built on sub-labels which don't exist yet
;since the sub-labels don't yet exist, you have to specify the total duration by providing
;another label. This label will have total duration equal to that other label
;the duration of the sublabels is inferred by making them evenly spaced
;important: requires ALL labels in containment to not exist yet
;this function mainly to be used for creating tuplets
;if you want to use labels you made already it's better to use a multi-call scheme to add-grouping-label
define function add-multi-label(layer, name, containment, duration-label)
 begin
	;first make the containment labels
	loop 
	  with sub-duration = extract-duration(find-label(layer, duration-label)) / length(containment)
	  for i from 0 below length(containment)
	     exec add-simple-label(layer, nth(i, containment), sub-duration)
	  end
	;now that the sub-labels exist we can make the actual label
	exec add-grouping-label(layer, name, containment)
 end


;make and return a label that has duration n unit pulses
;warning: this works in an unsafe way, the generated label is NOT A VALID LABEL
;the only way it is valid is that if you can get-duration on it you get the correct duration
define function n-unit(n)
 begin
    with label-name = strcat("_____", format(nil, "~A", n), "_____"),
         layer-names = table-get-keys()
 
    loop 
      for i from 0 below length(layer-names)
         if find-label(nth(i, layer-names), label-name, expect-to-find: false) = false then 
         exec insert-label(nth(i, layer-names), make-unsafe-duration-label(label-name, n * *unit-pulse-duration*))
      end
    
    return label-name
 end


;so technicallyyy you only need to call this if you are going to use n-unit()
;but it's good style to use it anyway
define function add-layer(name)
  begin
    exec init-labels-for-layer(name)
  end
