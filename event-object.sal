
;an event object is a list {name generator parameters info}
;where name is the a string naming the event
;parameters is a list of strings where each string
;tells us what qualities change over the labels
;these qualities will be passed into the generator to generate sound
;for this event. The information regarding the value of the parameter
;accross the labels is in info

;alright, now what is info?
;info is a list of parameters {p1 p2 p3 ... pn}
;Each parameter pi is a list {parameter-name {v1 v2 v3 ... vn}}
;where each vi is a list {parameter-value, context-decider}
;where the context-decider tells us for which contexts the parameter-name for this event has value parameter-value

;test if the parameter-name is in parameter-list and if so just return the parameter-list
;otherwise add the parameter name to the parmeter-list and return that 
define function add-parameter-to-parameter-list(parameter-list, parameter-name)
 begin
	loop 
	  for i from 0 below length(parameter-list)
		if nth(i, parameter-list) = parameter-name then return parameter-list
	  end
	return cons(parameter-name, parameter-list)
 end

define function make-info-list(parameter-names)
 begin
	set result = nil
	loop
	 for i from 0 below length(parameter-names)
		set result = cons(list(nth(i, parameter-names), nil), result)
	 end
	return result
 end

;keeps info list the same if parameter is already present
 define function add-parameter-to-info-list(info-list, parameter-name)
  begin
	loop
	 for i from 0 below length(info-list)
			if nth(0, nth(i, info-list)) = parameter-name then return info-list
	 end
	return cons(list(parameter-name, nil), info-list)
  end

;ONLY ONE context-decider for each parameter-value
;in other words, DO NOT make multiple calls to this function for the same parameter-value, it will not make the check!
define function add-value-to-info-list(info-list, parameter-name, parameter-value, context-decider)
 begin
	set mediary-result = add-parameter-to-info-list(info-list, parameter-name)
	set result = nil
	loop
	 for i from 0 below length(mediary-result)
		if nth(0, nth(i, mediary-result)) != parameter-name then
		 begin
			set result = cons(nth(i, mediary-result), result)
		 end
		else 
		 begin
			set new-value-list = list(parameter-name, cons(list(parameter-value, context-decider), nth(1, nth(i, mediary-result))))
			set result = cons(new-value-list, result)
		 end
	 end
	return reverse(result)
 end



define function make-event-object(name, generator, parameters)
 begin
	return list(name, generator, parameters, make-info-list(parameters))
 end

define function get-event-name(event-object)
 begin
	return nth(0, event-object)
 end

define function get-event-generator(event-object)
 begin
	return nth(1, event-object)
 end

define function get-event-parameters(event-object)
 begin
	return nth(2, event-object)
 end	

define function get-event-info(event-object)
 begin
   return nth(3, event-object)
 end

;add the information to an event object that we want parameter parameter-name
;to have value parameter-value at contexts accepted by context-decider
;!!important note: you can only add info for a parameter-value once!!!
;do not make multiple calls to add-info for the same parameter-value, instead
;OR together your context deciders for that parameter-value
;ALSO, *for now*, do not give context-deciders that would both accept the same context
;for different values of the same parameter, that would force us to make a new voice in some sense
define function add-info(event-object, parameter-name, parameter-value, context-decider)
 begin
	set event-name = get-event-name(event-object)
	set event-generator = get-event-generator(event-object)
	set event-parameters = add-parameter-to-parameter-list(get-event-parameters(event-object), parameter-name)
	set new-info = add-value-to-info-list(get-event-info(event-object), parameter-name, parameter-value, context-decider)
	return list(event-name, event-generator, event-parameters, new-info)
 end

;accumulate a list of all the context-deciders this event uses
define function get-all-context-deciders-for-event(event-object)
 begin
	set res = nil
	set info-list = get-event-info(event-object)
	loop
	 for i from 0 below length(info-list)
		set parameter-list = nth(1, nth(i, info-list))
		loop 
		  for j from 0 below length(parameter-list)
			set res = cons(nth(1, nth(j, parameter-list)), res)
		  end
	 end
	 return res
 end